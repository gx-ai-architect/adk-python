{"task_description": "Direct code translation of COBOL application logic to Python.", "seed_question": "Given a COBOL snippet that contains an imperative sequence for processing employee payroll, translate it directly into Python.", "seed_response": "# COBOL logic: PROCESS-EMPLOYEE-PAYROLL\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 EMPLOYEE-TABLE.\n    05 EMPLOYEE-ENTRY OCCURS 10 TIMES.\n        10 EMP-ID         PIC 9(5).\n        10 EMP-NAME       PIC A(30).\n        10 EMP-SALARY     PIC 9(6)V99.\n\nPROCEDURE DIVISION.\nPROCESS-EMPLOYEE-PAYROLL.\n    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10\n        DISPLAY 'Processing ' EMP-NAME(I)\n        COMPUTE NEW-SALARY(I) = EMP-SALARY(I) * 1.05\n        DISPLAY 'New Salary: ' NEW-SALARY(I)\n    END-PERFORM.\n\n# Equivalent Python code:\nemployees = [\n    {'id': '001', 'name': 'John Doe', 'salary': 50000.00},\n    {'id': '002', 'name': 'Jane Smith', 'salary': 62000.00},\n    # Additional employee data goes here\n]\n\ndef process_employee_payroll(employees):\n    for employee in employees:\n        print(f"Processing {employee['name']}")\n        new_salary = employee['salary'] * 1.05\n        print(f"New Salary: {new_salary:.2f}")\n\nprocess_employee_payroll(employees)"}
{"task_description": "Translating COBOL's sequence control to Python loops.", "seed_question": "Convert a COBOL loop using PERFORM UNTIL into a Python while loop for managing task repetitions.", "seed_response": "# COBOL: PERFORM UNTIL condition\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 COUNTER                  PIC 9(2) VALUE 0.\n\nPROCEDURE DIVISION.\nPERFORM-INCREMENTS.\n    PERFORM WITH TEST AFTER UNTIL COUNTER > 10\n        ADD 1 TO COUNTER\n        DISPLAY 'Counter: ' COUNTER\n    END-PERFORM.\n\n# Equivalent Python code:\ncounter = 0\nwhile counter <= 10:\n    counter += 1\n    print(f"Counter: {counter}")"}
{"task_description": "Converting COBOL's complex data structures to Python dictionaries.", "seed_question": "Translate a nested COBOL data structure to Python's nested dictionaries.", "seed_response": "# COBOL nested structures\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 CUSTOMER-RECORD.\n    05 CUST-ID        PIC 9(5).\n    05 CUST-INFO.\n        10 CUST-NAME   PIC A(20).\n        10 CUST-AGE    PIC 9(2).\n        10 CUST-ADDR.\n            15 STREET  PIC A(30).\n            15 CITY    PIC A(20).\n            15 ZIP     PIC 9(5).\n\n# Equivalent Python code:\ncustomer_record = {\n    "cust_id": "12345",\n    "cust_info": {\n        "cust_name": "Alice Doe",\n        "cust_age": 28,\n        "cust_addr": {\n            "street": "123 Elm St",\n            "city": "Springfield",\n            "zip": "12345"\n        }\n    }\n}"}